import disnake
from disnake.ext import commands
import datetime
import random

import config
import database

class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–π –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def balance(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member = None):
        target_user = user if user else inter.author
        user_data = database.get_user_data(target_user.id)
        balance = user_data[1] # balance is the second column
        bank = user_data[2] # bank is the third column

        embed = disnake.Embed(
            title=f"üí∞ –ë–∞–ª–∞–Ω—Å {target_user.display_name}",
            color=disnake.Color.green()
        )
        embed.add_field(name="–ù–∞–ª–∏—á–Ω—ã–µ", value=f"`{balance:,}` –º–æ–Ω–µ—Ç", inline=True)
        embed.add_field(name="–í –±–∞–Ω–∫–µ", value=f"`{bank:,}` –º–æ–Ω–µ—Ç", inline=True)
        embed.set_thumbnail(url=target_user.avatar.url if target_user.avatar else target_user.default_avatar.url)
        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª: {inter.author.display_name}")
        await inter.response.send_message(embed=embed, ephemeral=False)

    async def _check_cooldown(self, inter: disnake.ApplicationCommandInteraction, user_id: int, command_type: str, cooldown_hours: int):
        last_claim_str = database.get_last_claim_time(user_id, command_type)
        if last_claim_str:
            last_claim_time = datetime.datetime.fromisoformat(last_claim_str)
            time_since_last_claim = datetime.datetime.now() - last_claim_time
            if time_since_last_claim.total_seconds() < cooldown_hours * 3600:
                remaining_time = datetime.timedelta(hours=cooldown_hours) - time_since_last_claim
                hours, remainder = divmod(int(remaining_time.total_seconds()), 3600)
                minutes, seconds = divmod(remainder, 60)
                await inter.response.send_message(
                    f"–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ `{hours}—á {minutes}–º {seconds}—Å`.",
                    ephemeral=True
                )
                return False
        return True

    @commands.slash_command(name="daily", description="–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã.")
    async def daily(self, inter: disnake.ApplicationCommandInteraction):
        if not await self._check_cooldown(inter, inter.author.id, "daily", 24):
            return

        database.update_user_balance(inter.author.id, config.DAILY_AMOUNT)
        database.update_last_claim_time(inter.author.id, "daily", datetime.datetime.now().isoformat())

        embed = disnake.Embed(
            title="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å!",
            description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ `{config.DAILY_AMOUNT}` –º–æ–Ω–µ—Ç!",
            color=disnake.Color.purple()
        )
        embed.set_thumbnail(url=inter.author.avatar.url if inter.author.avatar else inter.author.default_avatar.url)
        embed.set_footer(text=f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
        await inter.response.send_message(embed=embed, ephemeral=False)

    @commands.slash_command(name="weekly", description="–ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã.")
    async def weekly(self, inter: disnake.ApplicationCommandInteraction):
        if not await self._check_cooldown(inter, inter.author.id, "weekly", 7 * 24):
            return

        database.update_user_balance(inter.author.id, config.WEEKLY_AMOUNT)
        database.update_last_claim_time(inter.author.id, "weekly", datetime.datetime.now().isoformat())

        embed = disnake.Embed(
            title="üéâ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ë–æ–Ω—É—Å!",
            description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ `{config.WEEKLY_AMOUNT}` –º–æ–Ω–µ—Ç!",
            color=disnake.Color.blue()
        )
        embed.set_thumbnail(url=inter.author.avatar.url if inter.author.avatar else inter.author.default_avatar.url)
        embed.set_footer(text=f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.")
        await inter.response.send_message(embed=embed, ephemeral=False)

    @commands.slash_command(name="timely", description="–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã.")
    async def timely(self, inter: disnake.ApplicationCommandInteraction):
        if not await self._check_cooldown(inter, inter.author.id, "timely", 2):
            return

        database.update_user_balance(inter.author.id, config.TIMELY_AMOUNT)
        database.update_last_claim_time(inter.author.id, "timely", datetime.datetime.now().isoformat())

        embed = disnake.Embed(
            title="‚è±Ô∏è –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ë–æ–Ω—É—Å!",
            description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ `{config.TIMELY_AMOUNT}` –º–æ–Ω–µ—Ç!",
            color=disnake.Color.orange()
        )
        embed.set_thumbnail(url=inter.author.avatar.url if inter.author.avatar else inter.author.default_avatar.url)
        embed.set_footer(text=f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞.")
        await inter.response.send_message(embed=embed, ephemeral=False)

    @commands.slash_command(name="work", description="–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã.")
    async def work(self, inter: disnake.ApplicationCommandInteraction):
        if not await self._check_cooldown(inter, inter.author.id, "work", 4):
            return

        database.update_user_balance(inter.author.id, config.WORK_AMOUNT)
        database.update_last_claim_time(inter.author.id, "work", datetime.datetime.now().isoformat())

        embed = disnake.Embed(
            title="üë∑ –†–∞–±–æ—Ç–∞!",
            description=f"–í—ã —É—Å–µ—Ä–¥–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ `{config.WORK_AMOUNT}` –º–æ–Ω–µ—Ç!",
            color=disnake.Color.brand_green()
        )
        embed.set_thumbnail(url=inter.author.avatar.url if inter.author.avatar else inter.author.default_avatar.url)
        embed.set_footer(text=f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.")
        await inter.response.send_message(embed=embed, ephemeral=False)

    @commands.slash_command(name="addcoin", description="–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.")
    @commands.has_role(config.ADMIN_ROLE_ID) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async def addcoin(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member, amount: int):
        if amount <= 0:
            await inter.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", ephemeral=True)
            return

        database.update_user_balance(user.id, amount)
        embed = disnake.Embed(
            title="‚úÖ –ú–æ–Ω–µ—Ç—ã –î–æ–±–∞–≤–ª–µ–Ω—ã",
            description=f"–ù–∞ –±–∞–ª–∞–Ω—Å **{user.display_name}** –¥–æ–±–∞–≤–ª–µ–Ω–æ `{amount:,}` –º–æ–Ω–µ—Ç.",
            color=disnake.Color.green()
        )
        embed.set_footer(text=f"–í—ã–ø–æ–ª–Ω–∏–ª: {inter.author.display_name}")
        await inter.response.send_message(embed=embed)
        try:
            await user.send(f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ `{amount:,}` –º–æ–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {inter.author.display_name}.")
        except disnake.HTTPException:
            pass # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°

    @addcoin.error
    async def addcoin_error(self, inter: disnake.ApplicationCommandInteraction, error):
        if isinstance(error, commands.MissingRole):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            await inter.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}", ephemeral=True)

    @commands.slash_command(name="deposit", description="–í–Ω–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –≤ –±–∞–Ω–∫.")
    async def deposit(self, inter: disnake.ApplicationCommandInteraction, amount: int):
        user_data = database.get_user_data(inter.author.id)
        current_balance = user_data[1]

        if amount <= 0:
            await inter.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", ephemeral=True)
            return
        if amount > current_balance:
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", ephemeral=True)
            return

        commission = int(amount * config.BANK_COMMISSION_PERCENT)
        net_amount = amount - commission

        database.update_user_balance(inter.author.id, -amount)
        database.update_user_bank(inter.author.id, net_amount)

        embed = disnake.Embed(
            title="üè¶ –í–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–∞–Ω–∫",
            description=f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ `{amount:,}` –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫.",
            color=disnake.Color.blue()
        )
        embed.add_field(name="–ö–æ–º–∏—Å—Å–∏—è", value=f"`{commission:,}` –º–æ–Ω–µ—Ç ({config.BANK_COMMISSION_PERCENT*100}%)", inline=False)
        embed.add_field(name="–í–Ω–µ—Å–µ–Ω–æ (—á–∏—Å—Ç–æ)", value=f"`{net_amount:,}` –º–æ–Ω–µ—Ç", inline=False)
        embed.set_footer(text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ: {database.get_user_data(inter.author.id)[2]:,}")
        await inter.response.send_message(embed=embed)

    @commands.slash_command(name="withdraw", description="–°–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã –∏–∑ –±–∞–Ω–∫–∞.")
    async def withdraw(self, inter: disnake.ApplicationCommandInteraction, amount: int):
        user_data = database.get_user_data(inter.author.id)
        current_bank = user_data[2]

        if amount <= 0:
            await inter.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", ephemeral=True)
            return
        if amount > current_bank:
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫–µ.", ephemeral=True)
            return

        commission = int(amount * config.BANK_COMMISSION_PERCENT)
        net_amount = amount - commission

        database.update_user_bank(inter.author.id, -amount)
        database.update_user_balance(inter.author.id, net_amount)

        embed = disnake.Embed(
            title="üí∏ –°–Ω—è—Ç–∏–µ –∏–∑ –ë–∞–Ω–∫–∞",
            description=f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ `{amount:,}` –º–æ–Ω–µ—Ç –∏–∑ –±–∞–Ω–∫–∞.",
            color=disnake.Color.dark_blue()
        )
        embed.add_field(name="–ö–æ–º–∏—Å—Å–∏—è", value=f"`{commission:,}` –º–æ–Ω–µ—Ç ({config.BANK_COMMISSION_PERCENT*100}%)", inline=False)
        embed.add_field(name="–ü–æ–ª—É—á–µ–Ω–æ (—á–∏—Å—Ç–æ)", value=f"`{net_amount:,}` –º–æ–Ω–µ—Ç", inline=False)
        embed.set_footer(text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Ä—É–∫–∞—Ö: {database.get_user_data(inter.author.id)[1]:,}")
        await inter.response.send_message(embed=embed)

    @commands.slash_command(name="rob", description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–≥—Ä–∞–±–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def rob(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member):
        if user.bot:
            await inter.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥—Ä–∞–±–∏—Ç—å –±–æ—Ç–æ–≤!", ephemeral=True)
            return
        if user.id == inter.author.id:
            await inter.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if not await self._check_cooldown(inter, inter.author.id, "rob", config.ROB_COOLDOWN_HOURS):
            return

        target_data = database.get_user_data(user.id)
        target_balance = target_data[1]

        if target_balance < 1000: # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
            await inter.response.send_message(f"{user.display_name} —Å–ª–∏—à–∫–æ–º –±–µ–¥–µ–Ω, —á—Ç–æ–±—ã –µ–≥–æ –≥—Ä–∞–±–∏—Ç—å.", ephemeral=True)
            return

        result = random.randint(1, 100)
        await inter.response.defer(ephemeral=False) # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞

        embed = disnake.Embed()
        embed.set_thumbnail(url=inter.author.avatar.url if inter.author.avatar else inter.author.default_avatar.url)
        embed.set_author(name=inter.author.display_name, icon_url=inter.author.avatar.url if inter.author.avatar else inter.author.default_avatar.url)

        if result <= config.ROB_CHANCE: # –£—Å–ø–µ—Ö
            stolen_amount = int(target_balance * config.ROB_SUCCESS_PERCENT)
            database.update_user_balance(user.id, -stolen_amount)
            database.update_user_balance(inter.author.id, stolen_amount)
            embed.title = "üéâ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –£—Å–ø–µ—à–Ω–æ!"
            embed.description = f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ **{user.display_name}** –∏ –ø–æ–ª—É—á–∏–ª–∏ `{stolen_amount:,}` –º–æ–Ω–µ—Ç!"
            embed.color = disnake.Color.green()
            await inter.edit_original_response(embed=embed)
        elif result <= config.ROB_CHANCE + config.ROB_FAIL_CHANCE: # –ü–æ–π–º–∞–ª–∏
            database.update_user_balance(inter.author.id, -config.ROB_FINE_AMOUNT) # –ú–æ–∂–µ—Ç —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
            embed.title = "üö® –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ù–µ—É–¥–∞—á–Ω–æ!"
            embed.description = (
                f"–í–∞—Å –ø–æ–π–º–∞–ª–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è **{user.display_name}**! "
                f"–í—ã –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –Ω–∞ `{config.ROB_FINE_AMOUNT:,}` –º–æ–Ω–µ—Ç."
            )
            embed.color = disnake.Color.red()
            await inter.edit_original_response(embed=embed)
        else: # –ù–µ—É–¥–∞—á–∞, –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞
            embed.title = "üòÖ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –ù–µ —É–¥–∞–ª–æ—Å—å"
            embed.description = f"–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –æ–≥—Ä–∞–±–∏—Ç—å **{user.display_name}**, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ. –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã."
            embed.color = disnake.Color.orange()
            await inter.edit_original_response(embed=embed)

        database.update_last_claim_time(inter.author.id, "rob", datetime.datetime.now().isoformat())

    @commands.slash_command(name="leaderboard", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.")
    async def leaderboard(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        await self._send_leaderboard_embed(inter)

    async def _send_leaderboard_embed(self, inter: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ø–∞:",
            color=disnake.Color.dark_teal()
        )
        embed.set_footer(text="–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ.")

        view = disnake.ui.View()
        view.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="–¢–æ–ø –ø–æ –ë–∞–ª–∞–Ω—Å—É", custom_id="leaderboard_balance"))
        view.add_item(disnake.ui.Button(style=disnake.ButtonStyle.green, label="–¢–æ–ø –ú–µ—Å—è—Ü–∞ (–°–æ–æ–±—â–µ–Ω–∏—è)", custom_id="leaderboard_month_messages"))
        view.add_item(disnake.ui.Button(style=disnake.ButtonStyle.red, label="–¢–æ–ø –ø–æ –°–æ–æ–±—â–µ–Ω–∏—è–º (–í—Å–µ–≥–æ)", custom_id="leaderboard_total_messages"))

        await inter.edit_original_response(embed=embed, view=view)

    @commands.Cog.listener("on_button_click")
    async def on_leaderboard_button_click(self, inter: disnake.MessageInteraction):
        if not inter.component.custom_id.startswith("leaderboard_"):
            return
        await inter.response.defer(ephemeral=False) # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

        leaderboard_type = inter.component.custom_id.split("_")[1]
        embed = disnake.Embed(color=disnake.Color.dark_teal())

        if leaderboard_type == "balance":
            leaderboard_data = database.get_leaderboard_balance()
            embed.title = "üí∞ –¢–æ–ø –ø–æ –ë–∞–ª–∞–Ω—Å—É"
            if leaderboard_data:
                description = ""
                for i, (user_id, balance) in enumerate(leaderboard_data):
                    user = self.bot.get_user(user_id)
                    username = user.display_name if user else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_id})"
                    description += f"**#{i+1}** {username}: `{balance:,}` –º–æ–Ω–µ—Ç\n"
                embed.description = description
            else:
                embed.description = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É."
        elif leaderboard_type == "month_messages":
            leaderboard_data = database.get_leaderboard_month_messages()
            embed.title = "üóìÔ∏è –¢–æ–ø –ú–µ—Å—è—Ü–∞ (–°–æ–æ–±—â–µ–Ω–∏—è)"
            if leaderboard_data:
                description = ""
                for i, (user_id, count) in enumerate(leaderboard_data):
                    user = self.bot.get_user(user_id)
                    username = user.display_name if user else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_id})"
                    description += f"**#{i+1}** {username}: `{count:,}` —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                embed.description = description
            else:
                embed.description = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –º–µ—Å—è—Ü–∞."
        elif leaderboard_type == "total_messages":
            leaderboard_data = database.get_leaderboard_messages()
            embed.title = "üí¨ –¢–æ–ø –ø–æ –°–æ–æ–±—â–µ–Ω–∏—è–º (–í—Å–µ–≥–æ)"
            if leaderboard_data:
                description = ""
                for i, (user_id, count) in enumerate(leaderboard_data):
                    user = self.bot.get_user(user_id)
                    username = user.display_name if user else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_id})"
                    description += f"**#{i+1}** {username}: `{count:,}` —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                embed.description = description
            else:
                embed.description = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º."
        else:
            await inter.followup.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–∞.", ephemeral=True)
            return

        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å–∏–ª: {inter.author.display_name}")

        view = disnake.ui.View()
        view.add_item(disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="–¢–æ–ø –ø–æ –ë–∞–ª–∞–Ω—Å—É", custom_id="leaderboard_balance"))
        view.add_item(disnake.ui.Button(style=disnake.ButtonStyle.green, label="–¢–æ–ø –ú–µ—Å—è—Ü–∞ (–°–æ–æ–±—â–µ–Ω–∏—è)", custom_id="leaderboard_month_messages"))
        view.add_item(disnake.ui.Button(style=disnake.ButtonStyle.red, label="–¢–æ–ø –ø–æ –°–æ–æ–±—â–µ–Ω–∏—è–º (–í—Å–µ–≥–æ)", custom_id="leaderboard_total_messages"))

        await inter.edit_original_response(embed=embed, view=view)


def setup(bot):
    bot.add_cog(Economy(bot))